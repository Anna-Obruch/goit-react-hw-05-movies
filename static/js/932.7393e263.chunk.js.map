{"version":3,"file":"static/js/932.7393e263.chunk.js","mappings":"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","sources":["pages/MoviesDetails/MoviesDetails.module.jsx","pages/MoviesDetails/MoviesDetails.jsx","services/getMovies.js","utils/constants.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const GoBackLink = styled.span`\n  a {\n    position: relative;\n    padding-left: 12px;\n  }\n\n  a::before {\n    content: '';\n    display: block;\n\n    border-color: #ffc700;\n    border-style: solid;\n    border-width: 0 0 2px 2px;\n    height: 6px;\n    left: 0;\n    position: absolute;\n    width: 6px;\n    margin-top: -4px;\n    top: 50%;\n\n    transform: rotate(45deg);\n    -webkit-transform: rotate(45deg);\n  }\n\n \n\n  :hover,\n  :focus {\n    color: #ffc700;\n    a::before {\n      border-color: white;\n    }\n    span {\n      color: white;\n    }\n  }\n`;\n\nexport const FilmWrapper = styled.div`\n  display: flex;\n  gap: 12px;\n  margin-top: 12px;\n  margin-bottom: 12px;\n`;\n\nexport const FilmImg = styled.img`\n  max-width: 182px;\n  background: #424242;\n  border-radius: 15px;\n`;\n\nexport const FilmTitle = styled.h2`\n  font-size: 26px;\n  margin-bottom: 12px;\n`;\n\nexport const FilmSubTitle = styled.h3`\n  font-size: 16px;\n  margin-bottom: 6px;\n`;\n\nexport const FilmDescr = styled.p`\n  font-size: 16px;\n  color:#3f3e40;\n  margin-bottom: 12px;\n`;\n\nexport const StyledListDescr = styled.ul`\n  font-size: 16px;\n  display: flex;\n  gap: 18px;\n  padding: 0;\n  list-style-type: none;\n\n  border-radius: 20px;\n  color: #3f3e40;\n  margin-bottom: 12px;\n`;\nexport const StyledList = styled.ul`\n  display: flex;\n  gap: 18px;\n  padding: 14px;\n  list-style-type: none;\n  font-size: 18px;\n\n  border-radius: 20px;\n`;\nexport const ListItem = styled.li`\n  span {\n    color: #ffc700;\n  }\n\n  a:hover,\n  a:focus,\n  a:active {\n    color: #ffc700;\n    span {\n      color: white;\n    }\n  }\n`;","import { Suspense, useEffect, useState } from 'react';\nimport { Link, NavLink, Outlet, useLocation, useParams,} from 'react-router-dom';\nimport { getMovieById } from 'services/getMovies';\nimport { BASE_POSTER_URL, PLACEHOLDER } from 'utils/constants';\nimport {\n  FilmWrapper,\n  StyledList,\n  ListItem,\n  FilmImg,\n  FilmTitle,\n  FilmDescr,\n  GoBackLink,\n  FilmSubTitle,\n  StyledListDescr,\n} from './MoviesDetails.module';\n\nconst MoviesDetails =()=> {\n    const [movie, setMovie] = useState('');\n    const {movieId} = useParams();\n    const location = useLocation();\n\n    const backLinkHref = location.state?.from ?? '/movies';\n\n    useEffect (()=> {\n    const fetchMovieById = async ()=> {\n        try {\n            const movieById = await getMovieById(movieId);\n            setMovie(movieById)\n        } catch (e) {\n            console.log(e);\n        }\n     }; fetchMovieById();\n         }, [movieId]);\n\n         return(\n            <>\n            <GoBackLink>\n             <Link to={backLinkHref}>Go back</Link>   \n            </GoBackLink>\n            <FilmWrapper>\n                <FilmImg src={`${\n            movie.poster_path\n              ? BASE_POSTER_URL + movie.poster_path\n              : PLACEHOLDER + '?text=' + movie.original_title\n          }`}\n          alt=\"get\"\n        />\n        <div>\n            <FilmTitle>{movie.original_title}</FilmTitle>\n            <FilmSubTitle>Rating: {Math.round(movie.vote_average)}</FilmSubTitle>\n            <FilmSubTitle>Overview</FilmSubTitle>\n            <FilmDescr>{movie.overview}</FilmDescr>\n            <FilmSubTitle>Genres</FilmSubTitle>\n            <StyledListDescr>\n                {movie.genres?.map(genre => (\n                    <li key={genre.id}>{genre.name}</li>\n                ))}\n            </StyledListDescr>\n        </div>\n            </FilmWrapper>\n            <div> \n            <h2>Additional information</h2>\n        <StyledList>\n          <ListItem>\n            <NavLink to=\"cast\" state={location.state}>\n              Cast\n            </NavLink>\n          </ListItem>\n          <ListItem>\n            <NavLink to=\"reviews\" state={location.state}>\n              Reviews\n            </NavLink>\n          </ListItem>\n        </StyledList>\n        <Suspense fallback={<div>Loading subpage...</div>}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </>\n  );\n};\n\nexport default MoviesDetails;","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '3373af60a4ee1fe7510a1a61c11380e1';\n\nexport const getTrendingMovies = async () =>{\n    const {data} = await axios.get(`trending/movie/week?api_key=${API_KEY}`);\n    return data.results;\n};\n\nexport const getMovieByQuery = async query => {\n    const {data} = await axios.get (`search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`);\n    return data.results;\n};\n\nexport const getMovieById = async movieId => {\n    const {data} = await axios.get (`movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n    return data\n};\nexport const getCastMovie = async movieId => {\n    const { data } = await axios.get(\n        `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n      );\n    \n      return data.cast;  \n};\nexport const getReviewsMovie = async movieId => {\n    const { data } = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n  \n    return data.results;\n  };","export const BASE_POSTER_URL = 'https://image.tmdb.org/t/p/w500/';\nexport const PLACEHOLDER = 'https://via.placeholder.com/182x273';"],"names":["GoBackLink","styled","FilmWrapper","FilmImg","FilmTitle","FilmSubTitle","FilmDescr","StyledListDescr","StyledList","ListItem","useState","movie","setMovie","movieId","useParams","location","useLocation","backLinkHref","state","from","useEffect","fetchMovieById","getMovieById","movieById","console","log","to","src","poster_path","BASE_POSTER_URL","PLACEHOLDER","original_title","alt","Math","round","vote_average","overview","genres","map","genre","name","id","Suspense","fallback","axios","API_KEY","getTrendingMovies","data","results","getMovieByQuery","query","getCastMovie","cast","getReviewsMovie"],"sourceRoot":""}